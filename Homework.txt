
Выбор болельщиков.

28 мая пройдет финал Лиги Чемпионов, в котором встретятся Реал Мадрид и Атлетико Мадрид.
В Твиттере активно обсуждают, кто же победит во этом матче, а лексемы "RealMadrid" и "AtleticoMadrid" регулярно находятся в трендах.

Получим две поисковые выборки некоторой длины для каждой из команд (считаем 5000 достаточной длиной)
по запросам "RealMadrid" и "AtleticoMadrid" за последний месяц.
Будем считать, что говорящие на языке L пользователи болеют за команду из первой выборки, если в ней больше твитов на языке L, чем во второй.
Необходимо проанализировать предпочтения болельщиков всех языков, на которых были найдены твиты.

Полученные данные должны быть визуализированы (любым средством). Результат в формате pdf должен быть приложен к проекту.

Твит.
Необходимо реализовать класс Tweet, которым будет параметризован контейнер твитов.
Должна быть реализована возможность сравнения твитов: equals(переопределенны метод класса Object, осуществляющий сравнение по полям content и timestamp) и три Comparator'а по timestamp, favoriteCount и retweetCount
Должна быть поддержана возможность использования Tweet в качестве элемента Set<Tweet> произвольной имплементации


Контейнер твитов.
Необходимо реализовать интерфейс TweetsContainer (/src/TweetsContainer.java)
Объект класса, реализующего данный интерфейс, должен предоставлять некоторые функции обработки и хранения выборки твитов.
Для каждого метода реализующего класса должен быть создан unit test.
При разработке любого public метода важно прдполагать, что на вход могут быть поданы некорректные данные. 


Данные.
Для доступа к данным предлагается использовать Twitter API, а точнее уже готовую его реализацию на Java - библиотеку twitter4j.
Twitter4j доступна для использования через Maven:
        <dependency>
            <groupId>org.twitter4j</groupId>
            <artifactId>twitter4j-core</artifactId>
            <version>4.0.2</version>
        </dependency>

Доступ к Twitter4j необходимо инкапсулировать в отдельном классе - Accessor.
Нигде кроме этого класса в проекте не должен присутствовать
	import twitter4j.

Класс Accessor должен содержать метод:
	/**
	* @param query - строка поиска, передаваемая в Twitter4j
	* @param since - дата, с которой начинается поиск (достаточно указать день, месяц и год)
	* @param querySize - количество твитов в результирующей выборке
	*/
	public static Collection<Tweet> search(String query, Date since, int querySize)

Важно учесть:
	Twitter API имеет некоторые ограничения на querySize запроса и количество запросов в отрезок времени
	Для пользования Twitter API понадобится oAuth аутентификация внутри приложения:
	import twitter4j.conf.ConfigurationBuilder;
	ConfigurationBuilder cb = new ConfigurationBuilder();
        cb.setDebugEnabled(true)
            .setOAuthConsumerKey(your_OAuthConsumerKey)
            .setOAuthConsumerSecret(your_OAuthConsumerSecret)
            .setOAuthAccessToken(your_OAuthAccessToken)
            .setOAuthAccessTokenSecret(your_OAuthAccessTokenSecret); 
    	Для получения СonsumerKey, ConsumerSecret, AccessToken и TokenSecret необходимо создать приложение на https://apps.twitter.com и далее сгенерировать их в сеттингах.
    
Формат сдачи:
Отправьте сслыку на ваш публичный github репозиторий на адрес s.rybalkin@corp.mail.ru
В репозитории должен содержаться проект, собираемый maven.
Для проверки важны только исходиники, в том числе pom.xml
Для того, чтобы в папку с проектом не попало ничего лишнего, воспользуйтесь файлом src/.gitignore
( О том, что такое `проект, собираемый maven` можно прочитать http://www.apache-maven.ru/index.html
и, если вы используете Intellij Idea -  https://www.jetbrains.com/help/idea/2016.1/getting-started-with-maven.html?origin=old_help )
Также в репозитории должны находиться визуализированные чиловые данные анализа предпочтения болельщиков. (pdf)

Сроки сдачи:
23/05/2016 23:59

Штрафы:
-20% от получаемых баллов за каждый день после срока сдачи. Например, при сдаче 25/05 оценка будет умножена на 0.6

Методы проверки:
Автоматизированное тестирование
